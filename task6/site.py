import random

# Function to check if a number is prime
def is_prime(n):
    """
    Check if a given number is prime.

    @param n: The number to be checked.
    @return: True if the number is prime, False otherwise.
    """
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to find a primitive root modulo p
def find_primitive_root(p):
    """
    Find a primitive root modulo p.

    @param p: The prime number.
    @return: The primitive root if found, None otherwise.
    """
    if not is_prime(p):
        return None
    phi = p - 1
    for g in range(2, p):
        if pow(g, phi, p) == 1:
            return g
    return None

# Steps for Alice
def alice():
    """
    Steps performed by Alice.

    @return: The public key and Alice's secret key.
    """
    while True:
            
        # Step 1: Choose a prime number p
        p = random.choice([x for x in range(2, 100) if is_prime(x)])

        # Step 2: Choose a primitive root g
        g = find_primitive_root(p)

        if g != None:
                
            # Step 3: Choose a random secret key x
            n = p - 1
            x = random.randint(1, n)

            # Step 4: Compute the public key y
            print(g, x, p)
            y = pow(g, x, p)

            # Step 5: Publish the public key
            public_key = (p, g, y)

            return public_key, x
        else:
            alice()
# Steps for Bob
def bob(public_key, m):
    """
    Steps performed by Bob.

    @param public_key: The public key published by Alice.
    @return: The cipher text generated by Bob.
    """
    p, g, y = public_key

    # Step 2: Choose a random number k
    n = p - 1
    k = random.randint(1, n)

    # Step 4: Compute the values u and v
    u = pow(g, k, p)
    v = (m * pow(y, k, p)) % p

    # Step 5: Publish the cipher text
    cipher_text = (u, v)

    return cipher_text


# Steps for Alice in decryption
def alice_decrypt(cipher_text, x, p):
    """
    Steps performed by Alice for decryption.

    @param cipher_text: The cipher text received from Bob.
    @param x: Alice's secret key.
    @param p: The prime number.
    @return: The decrypted message.
    """
    u, v = cipher_text

    # Decrypt the message
    decrypted_message = (v * pow(u, p - 1 - x, p)) % p

    return decrypted_message

# alice_public_key, alice_secret_key = alice()
# print("Alice's Public Key (p, g, y):", alice_public_key)

done_test = 0
for i in range(1000):
        print(f"#{i+1}")
        alice_public_key, alice_secret_key = alice()
        print("Alice's Public Key (p, g, y):", alice_public_key)
        bob_cipher_text = bob(alice_public_key, 40)
        print("Bob's Cipher Text (u, v):", bob_cipher_text)

        decrypted_message = alice_decrypt(bob_cipher_text, alice_secret_key, alice_public_key[0])
        print("Alice's Decrypted Message:", decrypted_message)
        if decrypted_message == 40:
            print("Welldone")
            done_test = done_test+1
        if i == 9:
            print("done test")


print(f"{(done_test*100)/1000}% / 100%")